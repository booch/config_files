[include]
	path = ~/.config/git/local
	path = ~/.config/git/aliases
	path = ~/.config/git/drivers
[core]
	excludesFile = ~/.config/git/ignore  # This is actually the default now.
	fsmonitor = true  # Run FSMonitor daemon to track file updates in the background.
	untrackedcache = true  # Have FSMonitor also monitor untracked files.
	whitespace = trailing-space,space-before-tab
	# Paginate with `delta` if it's installed, else fall back to `less`.
	pager = "type delta >/dev/null 2>&1 && exec delta || exec less --tabs=4 -RFX"
[pager]
	status = true
[delta]
	features = plain
	tabs = 4
	navigate = true  # Allow `n` and `N` to move between sections.
	hyperlinks = true
	hyperlinks-file-link-format = "vscode://file/{path}:{line}"  # Zed uses the same format.
	file-style = bold darkblue
	file-decoration-style = bold darkblue box
	keep-plus-minus-markers = false
	# Use a light color palette.
	blame-palette = "lightcyan lightsteelblue powderblue skyblue plum thistle lavender lavenderblush pink wheat papayawhip lemonchiffon whitesmoke gainsboro silver"
	blame-format = "{commit:>8} {author:<18} {timestamp:^16}"
[delta "plain"]
	line-numbers = false  # BUG: As of 0.18.2, blank lines are not counted.
	side-by-side = false
	hunk-header-style = file line-number syntax
	hunk-header-decoration-style = blue ul ol
[delta "numbered"]
	# I'll probably switch to this format once the line numbering bug is fixed.
	line-numbers = true
	hunk-header-style = omit
[delta "side-by-side"]
	side-by-side = true
	line-numbers = false
	hunk-header-style = omit
[interactive]
	diffFilter = delta --color-only  # Used by `git add -p`.
[color]
	ui = true
	diff = auto
	status = auto
	branch = auto
	interactive = auto
[color "branch"]
    current = bold
    local = green
    remote = blue
[color "status"]
    added = green
    changed = red
    untracked = blue
[apply]
	whitespace = strip
	whitespace = nowarn
[merge]
	tool = nvimdiff  # Very few of the options work without a GUI. I use NeoVim.
	conflictstyle = zdiff3
	summary = true
[mergetool "nvimdiff"]
	layout = '(LOCAL/BASE/REMOTE),MERGED'  # Show all 3 versions on left, merged result on right.
[help]
	autocorrect = 50  # Automatically correct misspelled git subcommands after 5 seconds.
[branch]
	autosetuprebase = always  # Make 'git pull' rebase local commits on top of newly pulled-down commits instead of merging them. (http://www.viget.com/extend/only-you-can-prevent-git-merge-commits/)
	sort = -committerdate  # Sort branches to show the most recent updates at the top.
[pretty]
	oneline-details = format:%C(yellow)%h%Creset -%C(red)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset
	sha = format:%Cred%H\n
	subject = format:%s
	timeline = format:%h %an %ar - %s
	stash = %C(red)%h%C(reset) - %C(yellow)(%C(bold magenta)%gd%C(yellow))%C(reset) %<(70,trunc)%s %C(green)(%cr) %C(bold blue)%C(reset)
[commit]
	verbose = true  # Show branch name and diff as comments in default commit message.
	cleanup = scissors  # Allow commit message to contain comment lines. A line w/ `# === >8 ===` separates the commit message from the diff.
	gpgsign = true  # Sign commits with GPG (or SSH) by default.
[gpg]
	format = ssh  # Use SSH to sign commits.
[user]
	signingkey = ~/.ssh/id_ed25519.pub  # Use this key to sign commits.
[credential]
	# This is used implicitly when connecting to an HTTPS-based upstream repository.
	# Git will use the first helper that returns an answer to a query, and attempt to save credentials in ALL helpers that support saving.
	helper = cache --timeout 3600  # Cache credentials for 1 hour.
	helper = 1password  # Use 1Password to find/store credentials.
	helper = osxkeychain  # Use macOS Keychain to find/store credentials.
	helper = gnome-keyring  # Use Gnome Keyring to find/store credentials.
	helper = wincred  # Use Windows Credential Manager to find/store credentials.
	helper = oauth  # Use OAuth to authenticate to GitHub, GitLab, or BitBucket.
	helper = manager  # Use Git Credential Manager to find/store credentials for GitHub, GitLab, BitBucket, or Azure.
[fetch]
	recurseSubmodules = on-demand  # Only pull submodule changes if the main project updates the submodule reference.
	prune = true  # If a remote branch is deleted, allow `git fetch` to remove the tracking branch.
	prunetags = true  # If a remote tag is deleted, allow `git fetch` to remove it locally.
	fsckobjects = true  # Check for corrupt objects.
[push]
	autoSetupRemote = true  # Automatically set remote tracking branch when pushing a new branch.
	default = upstream  # Push only the current branch by default, not all branches.
	recurseSubmodules = on-demand  # Push any submodule changes first; if that fails, main project will not be pushed.
	followtags = true  # Push new tags along with commits being pushed.
	useForceIfIncludes = true  # See https://stackoverflow.com/a/74902633/26311
[pull]
	ff = true  # Only do fast-forward merges, so we don't overwrite any local changes.
[rebase]
	autostash = true  # Automatically stash and unstash during a rebase.
	autoSquash = true  # Automatically squash any commit with a `squash!` / `fixup!` / `amend!` prefix that matches another commit. Use `git commit --fixup or --squash`.
	updateRefs = true  # When rebasing a branch, also update any branches based on that branch. See https://github.blog/2022-10-03-highlights-from-git-2-38/#rebase-dependent-branches-with-update-refs.
	backend = merge  # Use newer backend to perform rebases.
	stat = true  # Show a diffstat of what changed upstream since the last rebase.
	missingCommitsCheck = error  # Don't allow deleting commits when rebasing.
[receive]
	fsckobjects = true  # Check for corrupt objects.
[rerere]
	enabled = true  # Automatically record and replay merge conflict resolutions. (http://git-scm.com/2010/03/08/rerere.html)
	autoupdate = true  # Automatically stage any resolutions that rerere solves.
[status]
	showStash = true  # Show number of stashes currently.
	submoduleSummary = true  # Show status of submodules in `git status` output.
[submodule]
	recurse = true  # Recurse into submodules when running `git status`.
[transfer]
	fsckobjects = true  # Check for corrupt objects.
[difftool]
    prompt = false  # Don't ask `are you sure` when using any difftool.
[diff]
	algorithm = histogram
	compactionHeuristic = true  # Shift hunk boundaries to hopefully make patches easier to read. (Removed in Git 2.12.)
	indentHeuristic = true  # Shift hunk boundaries to hopefully make patches easier to read. (Added in Git 2.11.)
	renames = copies  # Detect copies as well as renames.
	submodule = diff  # Show submodules changes in diffs just like any other changes.
	mnemonicPrefix = true  # Use `i` (index), `c` (commit), and `w` (working tree) instead of `a` and `b` for "directory" names.
	suppressBlankEmpty = true  # Omit space before blank lines (makes copy & paste work better).
	colorMoved = zebra  # Use different colors to show lines that have moved.
	colorMovedWS = ignore-all-space  # If a line has moved and had whitespace changes, show it as moved.
	wsErrorHighlight = all  # Show whitespace errors in deleted lines.
[init]
	defaultBranch = main
[log]
	date = format-local:%Y-%m-%d %a %H:%M  # Display dates like `2024-02-25 Sun 15:55`, in local time zone.
[blame]
# 	date = format-local:%Y-%m-%d %a  # Display dates like `2024-02-25 Sun`, in local time zone. (Not compatible with `delta`.)
[safe]
	directory = /opt/homebrew
