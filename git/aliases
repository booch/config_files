[alias]
    a = add
    aa = add --all
    ac = !git add -A && git commit
    add-untracked = !git untracked | xargs -r -e'\n' git add
    addall = add --all
    ae = add --edit
    ai = add --interactive
    algae = lg  # For voice control.
    aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort
    all-ours = !for file in $(git status -s | grep UU | cut -c4-); do git checkout --ours $file && git add $file; done
    all-theirs = !for file in $(git status -s | grep UU | cut -c4-); do git checkout --theirs $file && git add $file; done
    amend = commit --amend --reset-author --reuse-message=HEAD
    anw = !git diff -U0 -w --no-color -- \"$@\" | git apply --cached --ignore-whitespace --unidiff-zero "#"
    ap = add --patch
    assume = update-index --assume-unchanged
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    at = add --intent-to-add
    au = add --update
    authored-by = "!f(){ git log --no-merges --stat --author=\"$1\" --name-only --pretty=format:'' | sort -u | grep -v '^$' }; f"
    authors = "!git log --pretty=format:%aN | sort | uniq -c | sort -rn"
    b = branch -vv
    back = checkout "-"
    bclean = "!f(){ git branch --merged main | awk '$NF !~ /main/ {print $NF}' | xargs git branch -d; }; f"
    bl = branch --list
    blame = blame -w -C -C -C
    bn = !git branch-name
    br = branch
    bra = branch -ra
    branch-name = !git for-each-ref --format='%(refname:short)' $(git symbolic-ref HEAD)
    branch-clean = !git fetch && git remote prune origin && git branch --merged staging | grep -v staging | xargs git branch -d
    branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)%(color:black)\t%(refname:strip=3)\t%(color:red)%(authorname)\" --no-merged origin/main refs/remotes
    bugfix = "!f() { git co main; git pull; git switch -c bug/$1; git poh; }; f"
    by = !git authored-by
    c = commit
    ca = commit --amend
    caa = commit -a --amend -C HEAD
    changes = diff --name-status -r
    changed = diff --name-only
    check = diff --check
    checkin = commit
    checkout = "!f(){ echo 'Please use `git switch` or `git restore`, as appropriate.'; }; f"
    cheddar = commit --amend -CHEAD
    cherry-lick = !sh -c 'hub checkout HEAD^{} -- && hub cherry-pick \"$@\"' _
    chicken = checkin  # For voice control.
    cho = "!f(){ echo 'Please use `git switch` or `git restore`, as appropriate.'; }; f"
    choose-branch = "!f() { git branch --sort=-committerdate | fzf | sed 's/^\\* //g' | xargs echo -n ; }; f"
    change-branch = "!f() { git checkout $(git choose-branch) ; }; f"
    ci = checkin
    cl = clone
    clear = !git add . && git stash && git stash drop
    cm = commit --message
    cma = commit -a -m
    co = "!f(){ echo 'Please use `git switch` or `git restore`, as appropriate.'; }; f"
    cob = checkout -b
    cod = checkout develop
    com = checkout main
    committed-by = "!f(){ git log --no-merges --stat --committer=\"$1\" --name-only --pretty=format:'' | sort -u | grep -v '^$' }; f"
    conflicted = grep --name-only --full-name '<<<<<<< HEAD'
    conflicts = grep --name-only --full-name '<<<<<<< HEAD'
    continue = rebase --continue
    contributors = shortlog --summary --numbered
    copilot = !gh copilot
    count = shortlog -sn
    cp = cherry-pick
    cpc = cherry-pick --signoff
    create-branch = !sh -c 'git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -
    # This could/should also be an alias for `git blame`:
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    ctags = "!sh -c '[ -f .git/hooks/ctags ] || git init; .git/hooks/ctags' git-ctags"
    current-branch = branch --show-current
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    dc = diff --cached
    delete-branch = !sh -c 'git push origin :refs/heads/$1 && git remote prune origin && git branch -D $1' -
    delete-merged-branches = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    delete-remote-merged-branches = "!git branch -r --merged | grep -v '\\*' | sed 's/origin\\//:/' | xargs git push origin"
    dh1 = diff HEAD~1
    di = diff
    diff = diff --word-diff
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    diff-stat = diff -b --stat
    discard = checkout --
    div = divergence
    dl = "!git ll -1"  # Show modified files in last commit.
    dlc = diff --cached HEAD^  # Show diff of last commit.
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    doff = reset head^
    done = !git fetch && git rebase origin/main && git checkout main && git merge @{-1} && git push
    dr  = "!f() { git diff "$1"^.."$1"; }; f"
    ds = diff --stat=160,120
    dt = difftool
    dump = cat-file -p
    extend = commit --amend --no-edit
    f = "!git ls-files | grep -i"  # Find a file path in the index.
    fa = fetch --all
    fb = "!f() { git branch -a --contains $1; }; f"
    fc = "!f() { git log --pretty=oneline-details --decorate --date=short -S$1; }; f"
    fe = fetch --all --prune
    feature = "!f() { git co main; git pull; git switch -c feature/$1; git poh; }; f"
    ff = merge --ff-only
    filelog = log -u
    file-trail = log --follow -p -w
    fix = "!_() { c=$(git rev-parse $1) && git commit --fixup $c && git diff-index --quiet HEAD; s=$?; [ $s != 0 ] && git stash; git -c core.editor=cat rebase -i --autosquash $c~; [ $s != 0 ] && git stash pop; }; _"
    fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
    fl = log -u
    flip = !branch=$(git name-rev --name-only HEAD); git rebase --quiet --onto HEAD~2 HEAD~1 HEAD; git cherry-pick ORIG_HEAD~1; git update-ref refs/heads/$branch $(git rev-parse HEAD); git checkout --quiet $branch
    flip-last = !branch=$(git name-rev --name-only HEAD); git rebase --quiet --onto HEAD~2 HEAD~1 HEAD; git cherry-pick ORIG_HEAD~1; git update-ref refs/heads/$branch $(git rev-parse HEAD); git checkout --quiet $branch
    fm = "!f() { git log --pretty=oneline-details --decorate --date=short --grep=$1; }; f"
    fp = push --force-with-lease --force-if-includes
    ft = "!f() { git describe --always --contains $1; }; f"
    gclone = "!gclone() { mkdir -p $1; git clone git@github.com:$1.git; }; gclone";
    gh = !gh
    git = "!f() { git \"$@\"; }; f"
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
    gr = grep -Ii
    grab = "!f() { file=\"$1\"; branch=\"$2\"; git checkout \"$branch\" -- \"$file\"; git reset HEAD -- \"$file\"; }; f"
    graph = log --graph --pretty=oneline-details --abbrev-commit --date=relative
    grep = grep -Ii
    go = checkout -B
    h = help
    hist = log --pretty=oneline-details --graph --date=short
    history = log --pretty=oneline-details --graph --date=short
    home = rev-parse --show-toplevel
    hotfix = "!f() { git co main; git pull; git switch -c hotfix/$1; git poh; }; f"
    hub = !gh
    ignore = update-index --assume-unchanged
    ignored = !git ls-files -v | grep '^[[:lower:]]' | awk '{print $2}'
    ilog = log --pretty=format:'%h - %an, %ai : %s'
    ir = rebase -i origin/main
    irb = rebase --interactive
    is-tracked = ls-files --error-unmatch
    l = log --pretty=oneline-details -n 20 --graph --abbrev-commit
    la = "!git config -l | grep alias | cut -c 7-"
    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"  # Apply patch from other local repo.
    last = !git --no-pager log -1 HEAD --format=sha
    lasttag = describe --tags --abbrev=0
    lbr = branch --sort=-committerdate --verbose
    lc = log ORIG_HEAD.. --stat --no-merges
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    le = log --oneline --decorate
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    lg = log --graph --pretty=oneline-details --abbrev-commit --date=relative
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    llog = log --date=local
    ln = log --pretty=oneline-details
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    log-graph = log --all --graph --decorate
    log-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges
    log-timeline = log --format=timeline
    log-local = log --oneline origin..HEAD
    log-fetched = log --oneline HEAD..origin/main
    logp = log --pretty=nice --date-order
    logsf = log --stat --format=oneline --abbrev-commit
    logst = log --stat
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    lp = log --pretty=oneline-details --abbrev-commit --date=relative
    ls = log --oneline
    lsc = diff-tree --no-commit-id --name-only -r
    lt = describe --tags --abbrev=0
    me = config user.name
    m = merge -s recursive -X patience
    merge-branch = !git checkout main && git merge @{-1}
    merge-trail = log --ancestry-path --merges
    merged = branch --merged
    mm = merge --no-ff
    mnf = merge --no-ff
    modified-by = !git authored-by
    mr = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/merge-requests/$1/head:mr/$1 && git checkout mr/$1; }; f"
    mt = mergetool
    my-email = config user.email
    my-name = config user.name
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    news = log -p HEAD@{1}..HEAD@{0}
    nevermind = !git reset --hard HEAD && git clean -d -f
    next = !git add . && git rebase --continue
    noff = merge --no-ff
    nuke = reset --hard origin/HEAD
    one = show -s --pretty='format:%h (%s)'
    oneline = log --oneline
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    p = pair
    patch = log -p --no-walk --no-pager # Generate patch file from a commit.
    pf = push --force-with-lease --force-if-includes
    phh = push heroku HEAD
    phm = push heroku main
    pick = cherry-pick
    pickaxe = log -p -S
    please = push --force-with-lease --force-if-includes
    poh = push origin HEAD
    pohf = push origin HEAD --force-with-lease --force-if-includes
    pom = push origin main
    poof = pohf  # For voice control.
    pr = !hub pull-request
    praise = blame -w -C -C -C
    precommit = diff --cached -w --word-diff=color --word-diff-regex='[^[:space:]<>]+'
    prestage = diff -w --word-diff=color
    pristine = "!git reset --hard && git clean -fxd && git submodule foreach 'git pristine'"
    proof = pohf  # For voice control.
    prune = remote prune
    prune-all = !git remote | xargs -n 1 git remote prune
    publish = git flow feature publish
    pullff = pull --ff-only
    pull-prune = pull --prune
    pu = push -u origin HEAD
    pupush = !git push && git push --tags
    push = push --tags
    pusht = push --tags
    put = push origin HEAD
    pwip = '!git add -A . && git ci -m "Work in progress!!!" && git push origin "HEAD:WIP-$USER-$(date +%C%y%m%d)" && git reset HEAD^ --'
    pwipf = '!git add -A . && git ci -m "Work in progress!!!" && git push origin "HEAD:WIP-$USER-$(date +%C%y%m%d)" --force-with-lease --force-if-includes && reset HEAD^ --'
    r = remote
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbs = rebase --skip
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    recent = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'
    recon =  rebase --continue
    recursive-update = "!sh -c 'find \"${@:-.}\" -type d -name .git -exec dirname {} \\; -exec git --git-dir={} remote update \\;' _"
    regret = reset
    release = "!f() { git co main; git pull; git switch -c release/$1; git poh; }; f"
    rem = "!git config -l | grep remote.*url | tail -n +2"  # List remotes.
    remi = rebase origin/master --interactive
    remotes = remote -v
    remove = rm
    repush = !git pull --rebase && git push
    reset-authors = commit --amend --reset-author -CHEAD
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
    review = diff main..HEAD
    reword = commit --amend --only
    rewrite = rebase -i
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    ri = rebase --interactive
    rlog = !sh -c 'git log --color \"$@\" | fmt -s -w 79 | less -FRSX' _
    rmbranch = "!f(){ git branch -d ${1} && git push origin --delete ${1}; };f"
    root = rev-parse --show-toplevel
    ru = remote update --prune
    s = status -s
    sa = stash apply
    sba = "!f() { git subtree add --prefix $2 $1 main --squash; }; f"
    sbu = "!f() { git subtree pull --prefix $2 $1 main --squash; }; f"
    search = log --pretty=oneline-details -S
    sh = show
    sha1 = "!sh -c 'git rev-parse --short ${1:-HEAD}' --"
    shelve = stash save --include-untracked  ## AKA stash-all
    sho = show
    shove = push origin HEAD
    sl = stash list --pretty=stash
    slog = log --pretty=format:'%h - %an, %ar : %s'
    ski = stash --keep-index
    skip = rebase --skip
    sm = submodule
    sma = submodule add
    smu = submodule update --init --recursive
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    sortdiff = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'
    sq = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
    squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
    ss = stash save
    st = status
    sta = stash
    staash = stash --all
    staged = diff --staged
    stash-all = stash save --include-untracked
    stashes = stash list
    stat = status
    stl = stash list
    stp = stash pop
    sub = submodule
    summary = status -u -s
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit
    svn-pull = !git svn fetch && git svn rebase
    svn-push = svn dcommit
    sw = switch
    swap = !branch=$(git name-rev --name-only HEAD); git rebase --quiet --onto HEAD~2 HEAD~1 HEAD; git cherry-pick ORIG_HEAD~1; git update-ref refs/heads/$branch $(git rev-parse HEAD); git checkout --quiet $branch
    t = status
    tag-release = "!f() { git switch main; git pull; git tag release-$(date +%Y%m%d); git push --tags; }; f"
    tags = tag -l
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"
    today = log --stat --since='12am' --graph --pretty=oneline-details --abbrev-commit --date=relative
    today-all = log --all --since='12am' --graph --pretty=oneline-details --abbrev-commit --date=relative
    top = log -1 --stat
    topp = log -1 --stat --patch
    tr = log --graph --oneline --decorate --color
    track = !branch=$(git rev-parse --abbrev-ref HEAD); git branch $branch --set-upstream-to origin/$branch
    tree = log --graph --simplify-by-decoration --oneline --decorate --color --all
    trust = !mkdir -p .git/safe
    type = cat-file -t
    unadd = reset HEAD --
    unassume = update-index --no-assume-unchanged
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    uncommit = reset --soft HEAD^
    undo = '!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f'
    unignore = update-index --no-assume-unchanged
    unmerge = reset --hard ORIG_HEAD
    unmerged = branch --no-merged
    unpushed = !"PROJ_BRANCH=$(git symbolic-ref HEAD | sed 's|refs/heads/||') && git log origin/$PROJ_BRANCH..HEAD"
    unpulled = !"PROJ_BRANCH=$(git symbolic-ref HEAD | sed 's|refs/heads/||') && git fetch && git log HEAD..origin/$PROJ_BRANCH"
    unshelve = stash pop
    unstage = reset HEAD --
    unstash = stash pop
    untrack = rm -r --cached
    untracked = ls-files --other --exclude-standard
    up = !git fetch origin && git rebase origin/main
    update = !git fetch origin && git rebase origin/main
    url = remote get-url origin
    US = unstage  # For voice control.
    wd = diff --word-diff="color"
    wdc = diff --word-diff="color" --cached
    wdiff = diff --word-diff=color --word-diff-regex=[a-zA-Z_0-9]+
    what = show -w
    whatis = show -s --pretty=oneline-details --date=short
    whatsnew = log origin/main@{1}..origin/main@{0}
    which-branches-contain = branch -a --contains
    which-tags-contain = name-rev --name-only
    who = shortlog -s --no-merges --numbered --
    wipe = !git reset --hard; git clean -fd
