[include]
	path = ~/.gitconfig.local
[core]
	excludesfile = ~/.gitignore
[color]
	ui = auto
	diff = auto
	status = auto
	branch = auto
	interactive = auto
[color "status"]
	untracked = blue
[color "diff"]
	meta = yellow bold
[apply]
	whitespace = strip
	whitespace = nowarn
[merge]
	tool = opendiff
	summary = true
[help]
	autocorrect = 50  # Automatically correct misspelled git subcommands after 5 seconds.
[branch]
	autosetuprebase = always  # Make 'git pull' rebase local commits on top of newly pulled-down commits instead of merging them. (http://www.viget.com/extend/only-you-can-prevent-git-merge-commits/)
[push]
	default = upstream  # Push only the current branch by default, not all branches.
[pull]
	ff = true  # Only do fast-forward merges, so we don't overwrite any local changes.
[rebase]
	autostash = true  # Automatically stash and unstash during a rebase.
[rerere]
	enabled = true  # Automatically record and replay merge conflict resolutions. (http://git-scm.com/2010/03/08/rerere.html)
[diff]
	algorithm = histogram
	compactionHeuristic = true  # Shift hunk boundaries to hopefully make patches easier to read.
[alias]
	a = add
	aa = !git add . && git add -u && git status
	ac = !git add -A && git commit
	addall = !git add . && git add -u && git status
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort
	amend = commit --amend --reset-author --reuse-message=HEAD
	ap = add --patch
	b = branch
	br = branch
	branches = branch -a
	c = commit -m
	ca = commit --amend
	changes=diff --name-status -r
	changed=diff --name-only
	ci = commit -v
	clear = !git add . && git stash && git stash drop
	cm = commit
	co = checkout
	cob = checkout -b
	com = checkout master
	cp = cherry-pick
	create-branch = !sh -c 'git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	current-branch = rev-parse --abbrev-ref HEAD
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	dc = diff --cached
	delete-branch = !sh -c 'git push origin :refs/heads/$1 && git remote prune origin && git branch -D $1' -
	delete-merged-branches = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	delete-remote-merged-branches = "!git branch -r --merged | grep -v '\\*' | sed 's/origin\\//:/' | xargs git push origin"
	dh1 = diff HEAD~1
	di = diff
	diff-stat = diff -b --stat
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	done = !git fetch && git rebase origin/master && git checkout master && git merge @{-1} && git push
	ds = diff --stat=160,120
	dump = cat-file -p
	fa = fetch --all
	fb = "!f() { git branch -a --contains $1; }; f"
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	ff = merge --ff-only
	fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
	flip = !branch=$(git name-rev --name-only HEAD); git rebase --quiet --onto HEAD~2 HEAD~1 HEAD; git cherry-pick ORIG_HEAD~1; git update-ref refs/heads/$branch $(git rev-parse HEAD); git checkout --quiet $branch
	flip-last = !branch=$(git name-rev --name-only HEAD); git rebase --quiet --onto HEAD~2 HEAD~1 HEAD; git cherry-pick ORIG_HEAD~1; git update-ref refs/heads/$branch $(git rev-parse HEAD); git checkout --quiet $branch
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	ft = "!f() { git describe --always --contains $1; }; f"
	graph = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	go = checkout -B
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	history = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	home = rev-parse --show-toplevel
	ignore = update-index --assume-unchanged
	ignored = !git ls-files -v | grep '^[[:lower:]]' | awk '{print $2}'
	ir = rebase -i origin/master
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	lc = log ORIG_HEAD.. --stat --no-merges
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	llog = log --date=local
	ln = log --pretty=format:'%Cblue%h %Cred* %C(yellow)%s'
	log-graph = log --all --graph --decorate
	log-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges
	log-timeline = log --format='%h %an %ar - %s'
	log-local = log --oneline origin..HEAD
	log-fetched = log --oneline HEAD..origin/master
	lp = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
	merge-branch = !git checkout master && git merge @{-1}
	merged = branch --merged
	new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
	next = !git add . && git rebase --continue
	noff = merge --no-ff
	oneline = log --oneline
	ours = "!f() { git co --ours $@ && git add $@; }; f"
	p = pair
	patch = log -p --no-walk # Generate patch file from a commit.
	pick = cherry-pick
	phh = push heroku HEAD
	phm = push heroku master
	poh = push origin HEAD
	pom = push origin master
	pr = !hub pull-request
	praise = blame
	prune = remote prune
	prune-all = !git remote | xargs -n 1 git remote prune
	publish = git flow feature publish
	pullff = pull --ff-only
	put = push origin HEAD
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	remotes = remote -v
	reset-authors = commit --amend --reset-author -CHEAD
	ri = rebase --interactive
	rmbranch = "!f(){ git branch -d ${1} && git push origin --delete ${1}; };f"
	s = status -s
	search = log --pretty=short -S
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
	st = status
	staged = diff --staged
	stat = status
	svn-pull = !git svn fetch && git svn rebase
	svn-push = !git svn dcommit
	swap = !branch=$(git name-rev --name-only HEAD); git rebase --quiet --onto HEAD~2 HEAD~1 HEAD; git cherry-pick ORIG_HEAD~1; git update-ref refs/heads/$branch $(git rev-parse HEAD); git checkout --quiet $branch
	tags = tag -l
	theirs = "!f() { git co --theirs $@ && git add $@; }; f"
	today = log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative
	tr = log --graph --oneline --decorate --color
	tree = log --graph --oneline --decorate --color --all
	type = cat-file -t
	uncommit = reset --soft HEAD^
	undo = reset --hard
	unignore = update-index --no-assume-unchanged
	unmerge = reset --hard ORIG_HEAD
	unmerged = branch --no-merged
	unpushed = !"PROJ_BRANCH=$(git symbolic-ref HEAD | sed 's|refs/heads/||') && git log origin/$PROJ_BRANCH..HEAD"
	unpulled = !"PROJ_BRANCH=$(git symbolic-ref HEAD | sed 's|refs/heads/||') && git fetch && git log HEAD..origin/$PROJ_BRANCH"
	unstage = reset HEAD --
	unstash = stash pop
	up = !git fetch origin && git rebase origin/master
	update = !git fetch origin && git rebase origin/master
	wdiff = diff --word-diff=color --word-diff-regex=[a-zA-Z_0-9]+
	which-branches-contain = branch -a --contains
	which-tags-contain = name-rev --name-only
	who = shortlog -s --
	wipe = !git reset --hard; git clean -fd

